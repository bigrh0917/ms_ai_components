name: FastAPI Service Deploy

on:
  push:
    branches: [ "main" ]

env:
  ECR_REPOSITORY: fastapi_service
  CONTAINER_NAME: fastapi-app
  APP_PORT: 8000

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, Tag, and Push image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "Building Docker image..."
        docker build -t $IMAGE_URI .
        echo "Pushing image to ECR..."
        docker push $IMAGE_URI
        
        # 同时打上 latest 标签
        docker tag $IMAGE_URI $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # 输出镜像 URI 供后续步骤使用
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.10
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        envs: ECR_REGISTRY,ECR_REPOSITORY,IMAGE_TAG,CONTAINER_NAME,APP_PORT
        script: |
          echo "配置 AWS 凭证..."
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_DEFAULT_REGION=ap-northeast-1
          
          echo "登录 ECR..."
          aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
          
          IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "拉取新镜像: $IMAGE_URI"
          docker pull $IMAGE_URI
          
          echo "停止旧容器..."
          docker stop $CONTAINER_NAME || true
          docker rm $CONTAINER_NAME || true
          
          echo "启动新容器..."
          docker run -d \
            --name $CONTAINER_NAME \
            --restart unless-stopped \
            -p 80:$APP_PORT \
            --env-file /home/${{ secrets.EC2_USER }}/.env.production \
            $IMAGE_URI
          
          echo "清理旧镜像..."
          docker image prune -af --filter "until=24h"
          
          echo "部署完成！"
          
          # 健康检查
          echo "等待服务启动..."
          sleep 10
          
          echo "健康检查..."
          if curl -f http://localhost/health; then
            echo "服务健康检查通过"
          else
            echo "服务健康检查失败"
            exit 1
          fi

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "部署成功！"
        else
          echo "部署失败！"
        fi

